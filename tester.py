import DataModule
import NNModule

import time
import os
import numpy as np
import torch

net = NNModule.Net()

try:
    net.load_state_dict(torch.load("./backups/NN_MODEL_SAVE_LATEST.save"))
    net.eval()
except:
    print("cant find neural network save!")

train_data = DataModule.Train_Data()

with torch.no_grad():
    images, labels = train_data.data, train_data.labels
    images, labels = torch.tensor(images), torch.tensor(labels)
    answers = net(images)
    
    a = []
    for answer in answers:
        a.append(max(enumerate(answer), key=lambda x: x[1])[0])
    a = np.array(a)

    l = []
    for label in labels:
        l.append(max(enumerate(label), key=lambda x: x[1])[0])
    l = np.array(l)

    percents = round((l == a).sum()) / len(l) * 100
    print("–ê–•–ê–•–ê–•–•–ê –∑–∞–≥—Ä—É–∑–∏–ª 656 –∫–∞—Ä—Ç–∏–Ω–æ–∫!!!!))))ü§£üòÇüòÇ")
    print("–ó–∞–≥—Ä—É–∂–∞—é –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—åü•∞")
    print(f"–ù–µ–π—Ä–æ—Å–µ—Ç—å —É–≥–∞–¥–∞–ª–∞ {round(percents / 100 * 656)}üòú")
    print(f"–≠—Ç–æ {percents} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç 656üòé")
    print("""–ó–∞–≥—Ä—É–∂–µ–Ω–æ 656 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...
–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∞ 40 –æ–±—ä–µ–∫—Ç–æ–≤
–≠—Ç–æ 6.098 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π""")